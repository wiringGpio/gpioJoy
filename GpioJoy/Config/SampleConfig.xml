<?xml version="1.0" encoding="utf-8"?><GpioConfig>  <!-- GpioConfig Instructions  -->  <!--   In your config.XML file:    1a) Define i2c expander chips  1b) Define PCA expander chips  2)  Define GPIO pins and pin modes you want to control pins   3)  Define devices to use        - Stepper motors        - HBridge motors        - Seven segment displays        - ...  4)  Define user functions assigned to joystick buttons  -->  <!--==========================================================================================-->  <!--  Enumerations                                                                            -->  <!--==========================================================================================-->  <!--  Pin Mode  -->  <!--    public enum PinMode  {    Input = 0,    Output = 1,    PWMOutput = 2,    GPIOClock = 3  }  -->  <!--  Joystick Input  -->  <!--    public enum JoystickInput  {      LeftStickUp,      LeftStickDown,      LeftStickRight,      LeftStickLeft,      LeftStickBtn,      RightStickUp,      RightStickDown,      RightStickRight,      RightStickLeft,      RightStickBtn,      LeftTrigger,      RightTrigger,      ABtn,      BBtn,      XBtn,      YBtn,      LeftBumper,      RightBumper,      BackBtn,      StartBtn,      HomeBtn,      DpadUp,      DpadDown,      DpadLeft,      DpadRight,  };  -->  <!--  MCP Pin Expander Chip Type  -->  <!--   public enum McpType  {    Mcp23017 = 0,    Mcp23008 = 1,  }  -->    <!--==========================================================================================-->  <!--  GPIO Expansion Chip Schemas                                                             -->  <!--==========================================================================================-->  <!--  MCP 230XX Pin Expansion Chips  -->  <!--  //  Create a MCPs element, with one or more MCP element children  <MCPs>    <MCP>      <Type>Mcp230xx</Type>         <Address>32</Address>         <Base>100</Base>            </MCP>    //  Where:          Type is MCP type enum          Address should be in decimal format, for example 0x20 = 32          Pin base is a number where there are available pins for the size of the device (pin base + 8 or pin base + 16)  </MCPs>  -->    <!--  PCA9685 PWM Controller Chip  -->  <!--  //  Create a PCAs element, with one or more PCA element children  <PCAs>    <PCA>      <Address>96</Address>       //  address should be in decimal      <Base>300</Base>            //  pin base      <Frequency>50</Frequency>   //  frequency in hertz    </PCA>    //  Where:          Address should be in decimal format, for example 0x60 = 96          Pin base is a number where there are available pins for the size of the device (pin base + 16)  </PCAs>  -->      <!--==========================================================================================-->  <!--  GPIO Pin and Pin Mode Schemas                                                           -->  <!--==========================================================================================-->      <!--Create a PinModes element with one or more of the following children-->  <!--<PinModes>-->       <!--  Basic output pin  -->    <!--    <Pin>      <Number>N</Number>      <Mode>Output</Mode>      <Name>SomeName</Name>    </Pin>    //  Where:          N is the pin number, 0 - 40 for GPIO header pin, or pin base + pin number for MCP/PCA chip          Mode is PinMode enum          Name is optional for GUI display. Default is "Pin N"    -->    <!--  Basic output pin with joystick assignment -->    <!--  <Pin>    <Number>N</Number>    <Mode>Output</Mode>    <Joystick>YBtn</Joystick>  </Pin>  //  Where:        N is the pin number, 0 - 40 for GPIO header pin, or pin base + pin number for MCP/PCA chip        Mode is PinMode enum        Joystick is JoystickInput enum  -->        <!--  PWM Output Pin  -->    <!--  <Pin>   <Number>N</Number>   <Mode>PWMOutput</Mode>   <Range>4096</Range>          </Pin>  //  Where:        N is the pin number, 0 - 40 for GPIO header pin, or pin base + pin number for MCP/PCA chip        Mode is PinMode enum            Range is optional. Default is: 1024 for RPi pin 12 | 256 for Jetson pins 31 or 32 | 4096 for PCA9685  -->        <!-- PWM Output with Joystick Assignment -->    <!--     <Pin>      <Number>N</Number>      <Mode>PWMOutput</Mode>      <Range>4096</Range>         <Joystick scale=".5">LeftTrigger</Joystick>     </Pin>     //  Where:           N is the pin number, 0 - 40 for GPIO header pin, or pin base + pin number for MCP/PCA chip           Mode is PinMode enum           Range is optional. Default is: 1024 for RPi pin 12 | 256 for Jetson pins 31 or 32 | 4096 for PCA9685           Joystick (optional) is JoystickInput enum           Joystick scale is a number between 0.0 and 1.0 to limit PWM duty cycle in the joystick range off to full.              For example: set scale to .5 and the duty cycle will be 25 % when joystick is half way up, and 50% when joystick is all the way up.     -->  <!--</PinModes>-->        <!--==========================================================================================-->  <!--  Stepper Motor Driver Schemas                                                            -->  <!--==========================================================================================-->  <!--Create a StepperDrivers element with one or more of the following children-->  <!--<StepperDrivers>-->      <!--  Stepper sequence full steps (less torque, more speed)  -->    <!--      <StepperSequence>      <Id>1</Id>      <SequenceItems>        <Item>1, 0, 0, 0</Item>        <Item>0, 1, 0, 0</Item>        <Item>0, 0, 1, 0</Item>        <Item>0, 0, 0, 1 </Item>      </SequenceItems>    </StepperSequence>    //  Where:            Id is a unique id for this sequence          Items in the sequence indicate on / off state of the four control pins for the stepper    -->        <!--  Stepper sequence, full steps with more torque  -->    <!--    <StepperSequence>      <Id>2</Id>      <SequenceItems>       <Item>1,1,0,0</Item>       <Item>0,1,1,0</Item>       <Item>0,0,1,1</Item>       <Item>1,0,0,1</Item>      </SequenceItems>    </StepperSequence>    //  Where:            Id is a unique id for this sequence          Items in the sequence indicate on / off state of the four control pins for the stepper    -->    <!--  Stepper sequence for half steps, even more torque but less speed  -->    <!--    <StepperSequence>       <Id>3</Id>      <SequenceItems>        <Item>1,0,0,0</Item>        <Item>1,1,0,0</Item>        <Item>0,1,0,0</Item>        <Item>0,1,1,0</Item>        <Item>0,0,1,0</Item>        <Item>0,0,1,1</Item>        <Item>0,0,0,1</Item>        <Item>1,0,0,1</Item>      </SequenceItems>    </StepperSequence>     //  Where:          Id is a unique id for this sequence        Items in the sequence indicate on / off state of the four control pins for the stepper    -->    <!--  Unipolar stepper motor  -->    <!--    <StepperDriver>      <Sequence>1</Sequence>    	<Pins>Pin1,Pin2,Pin3,Pin4</Pins>      <MinDelay>1</MinDelay>      <MaxDelay>50</MaxDelay>    </StepperDriver>    //  Where:          Sequence is the Id of a StepperSequence you have defined          Pins are the pin numbers connected to the stepper control lines (usually through a transistor or darlington)          MinDelay (optional) is the minimum delay time between steps when driving this motor with a joystick (min delay is full speed at stick full on)          MaxDelay (optional) is the max delay time between steps when driving the motor with a joystick (max delay is slowest speed with stick close to zero)    -->    <!--  Bipolar stepper motor motor  -->    <!--    <StepperDriver>      <Sequence>1</Sequence>      <Pins>Pwm1Puls,Pwm2Minus,Pwm1Minus,Pwm2Plus</Pins>           <MinDelay>1</MinDelay>      <MaxDelay>50</MaxDelay>      <PwmScale>0.5</PwmScale>                    <HBridge>Pwm1,Ppl1,Npl1</HBridge>            <HBridge>Pwm2,Ppl2,Npl2</HBridge>    </StepperDriver>    //  Where:          Sequence is the Id of a StepperSequence you have defined          Pins Pwm1 and Pwm2 are the Pwm pins on two HBridge controllers, Plus or Minus is the direction to drive this pin          MinDelay (optional) is the minimum delay time between steps when driving this motor with a joystick (min delay is full speed at stick full on)          MaxDelay (optional) is the max delay time between steps when driving the motor with a joystick (max delay is slowest speed with stick close to zero)          PwmScale is an optional element, use a number between 0.0 and 1.0 to limit PWM duty cycle           HBridge Pwm is the pwm pin, Ppl is the positive polarity pin and Npl is the negative polarity pin      -->  <!--</StepperDrivers>-->      <!--==========================================================================================-->  <!--  HBridge Motor Drivers                                                                   -->  <!--==========================================================================================-->  <!--Create a HBridgeMotors element with one or more of the following children-->  <!--<HBridgeMotors>-->      <!--  HBridge Motor Controller  -->    <!--     <HBridgeMotor>       <HBridge>Pwm,Ppl,Npl</HBridge>             <Joystick direction="1"  scale=".5">RightStickUp</Joystick>           <Joystick direction="-1"  scale=".5">RightStickDown</Joystick>    </HBridgeMotor>    //  Where:          Pins Pwm is the pwm pin, Ppl is the positive polarity pin and Npl is the negative polarity pin          Joystick (optional) is JoystickInput enum          Joystick direction is 1 or -1 for forward or reverse          Joystick scale is a number between 0.0 and 1.0 to limit PWM duty cycle in the joystick range off to full.             For example: set scale to .5 and the duty cycle will be 25 % when joystick is half way up, and 50% when joystick is all the way up.    -->  <!--</HBridgeMotors>-->      <!--==========================================================================================-->  <!--  Seven Segment Display Drivers                                                           -->  <!--==========================================================================================-->  <!--Create a SevenSegDisplays element with one or more of the following children-->  <!--<SevenSegDisplays>-->      <!--  Seven segment Display Driver  -->      <!--    <SevenSegDisplay>      <SegPins>A,B,C,D,E,F,G,Dot,</SegPins>   //  pins for segments a-g plus dot      <Digits>Dig1,Dig2,Dig3</Digits>                       //  pins for digits, use negative numbers for common annode, positive for common cathode    </SevenSegDisplay>    //  Where:          SegPins are pin numbers connected to segments a - g plus the dot segment          Digits are the pin numbers connected to one or more pins for the display digits            Note: Use negative pin numbers for digit pins with a common annode LED, use positive numbers for digit pins with a common cathode LED     -->  <!--<SevenSegDisplays>-->        <!--==========================================================================================-->  <!--  User Functions                                                                          -->  <!--==========================================================================================-->  <!--Create a JoystickFunctions element with one or more of the following children-->  <!--<JoystickFunctions>-->      <!--  Load an assembly containing user defined functions  -->    <!--    <Assembly>      <Name>MyUserFunctions.dll</Name>      <Setup class="MyUserFunctions.SomeClass">InitSomeClass</Setup>      <Setup class="MyUserFunctions.SomeOtherClass">InitSomeOtherClass</Setup>    </Assembly>    //  Where:          Name is the path to the assembly. Typically you would copy your assembly to the same directory as GpioJoy.exe          Setup is one or more functions that will be called when the program loads the assembly.          Setup class is the class name, including namespace, of the function in the assembly    -->            <!-- Map a joystick button to a user function -->    <!--    <Function>      <Method assembly="GpioJoy.exe" class="GpioJoy.JoystickManager">HomeBtn</Method>       <Joystick>HomeBtn</Joystick>    </Function>    // Where:          Method is a function to call. Button mappings should call a void foo(bool) function. Stick mappings should call void foo(double) function.    -->  <!--<JoystickFunctions>-->      <!--==========================================================================================-->  <!--  Sample Configuration                                                                    -->  <!--  Configuration step 1: Define MCP and PCA chips                                          -->  <!--==========================================================================================-->    <MCPs>    <!-- MCP 23008 at 0x24 with pin base 300 -->    <MCP>      <Type>Mcp23008</Type>      <Address>36</Address>      <Base>300</Base>    </MCP>  </MCPs>  <PCAs>    <!-- Adafruit motor hat at default address 0x60 with pin base 600-->    <PCA>      <Address>96</Address>      <Base>600</Base>      <Frequency>50</Frequency>    </PCA>  </PCAs>  <!--==========================================================================================-->  <!--  Configuration step 2:  Define pins and pin modes                                        -->  <!--==========================================================================================-->    <PinModes>    <!--  GPIO header pin 7 assigned to Left bumper button -->    <Pin>      <Number>40</Number>      <Mode>Output</Mode>      <Joystick>LeftBumper</Joystick>    </Pin>    <!--  GPIO header pin 12 in PWM mode assigned to left trigger  -->    <Pin>      <Number>12</Number>      <Mode>PWMOutput</Mode>      <Joystick>LeftTrigger</Joystick>    </Pin>   <!--M4 on the Adafruit motor hat:  From pin base of 600:  PWM = 7, positive polarity = 5 and negative polarity = 6-->     <Pin>      <Number>605</Number>      <Mode>Output</Mode>    </Pin>    <Pin>      <Number>606</Number>      <Mode>Output</Mode>    </Pin>    <Pin>      <Number>607</Number>      <Mode>PWMOutput</Mode>    </Pin>    <!--<Pin>      <Number>40</Number>      <Mode>Output</Mode>      <Joystick>HomeBtn</Joystick>    </Pin>    <Pin>      <Number>40</Number>      <Mode>Output</Mode>      <Joystick>BackBtn</Joystick>    </Pin>    <Pin>      <Number>40</Number>      <Mode>Output</Mode>      <Joystick>StartBtn</Joystick>    </Pin>-->  </PinModes>  <!--==========================================================================================-->  <!--  Configuration step 3:  Define Devices                                                   -->  <!--==========================================================================================-->  <!-- This sample has a single H Bridge motor driver -->  <HBridgeMotors>        <!-- M4 on Motor Hat -->    <HBridgeMotor>      <Name>M4</Name>      <HBridge>607,605,606</HBridge>      <Joystick direction="1" scale="0.9">LeftStickUp</Joystick>      <Joystick direction="-1" scale="0.9">LeftStickDown</Joystick>    </HBridgeMotor>  </HBridgeMotors>    <!-- Stepper sequences and drivers would go in this element -->  <StepperDrivers>  </StepperDrivers>  <!--  Seven segment display drivers would go in this element  -->  <SevenSegDisplays>  </SevenSegDisplays>  <!--==========================================================================================-->  <!--  Configuration step 4:  Map user functions to joystick input                             -->  <!--==========================================================================================-->    <JoystickFunctions>    <!--  Home, Back, Start buttons are linked to configuration page change  -->    <!--  You do not need to load an assembly to use these functions, they are built into GpioJoy.exe  -->    <Function>      <Joystick>HomeBtn</Joystick>      <Method assembly="GpioJoy.exe" class="GpioJoy.JoystickManager">ConfigurationPageGoHome</Method>      <Name>Home</Name>    </Function>    <Function>      <Joystick>BackBtn</Joystick>      <Method assembly="GpioJoy.exe" class="GpioJoy.JoystickManager">ConfigurationPageGoBack</Method>      <Name>Back</Name>    </Function>    <Function>      <Joystick>StartBtn</Joystick>      <Method assembly="GpioJoy.exe" class="GpioJoy.JoystickManager">ConfigurationPageGoForward</Method>      <Name>Next</Name>    </Function>    <!--  You can load additioal functions from your own assemblies  -->    <!--  Here we are using the sample MyUserFunctions assembly in the solution  -->    <Assembly>      <Name>MyUserFunctions.dll</Name>      <Setup class="MyUserFunctions.UserFunctions">Init</Setup>    </Assembly>    <Function>      <Joystick>DpadUp</Joystick>      <Method assembly="MyUserFunctions.dll" class="MyUserFunctions.UserFunctions">ButtonDownPinFourty</Method>      <Name>Flash40</Name>    </Function>  </JoystickFunctions></GpioConfig>